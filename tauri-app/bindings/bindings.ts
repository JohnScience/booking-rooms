/* eslint-disable */
// This file was generated by [tauri-specta](https://github.com/oscartbeaumont/tauri-specta). Do not edit this file manually.

declare global {
    interface Window {
        __TAURI_INVOKE__<T>(cmd: string, args?: Record<string, unknown>): Promise<T>;
    }
}

// Function avoids 'window not defined' in SSR
const invoke = () => window.__TAURI_INVOKE__;

export function availableRooms(daysFromToday: number, groupSize: number) {
    return invoke()<([Room, Availability])[]>("available_rooms", { daysFromToday,groupSize })
}

export type TimeSlot = number
export type KnownRoom = "R205AMeetingRoom" | "R205BMeetingRoom" | "R205CMeetingRoom" | "R206ATerentiukSpaceForAdultLearning" | "R206BMillarFamilyLearningAndDiscoveryRoom" | "R320CMeetingRoom" | "R320GMeetingRoom" | "R320HMeetingRoom" | "R310AMeetingRoom" | "R310BMeetingRoom" | "R317AMeetingRoom" | "R317BFieldLawMeetingRoom" | "R319CMeetingRoom" | "R320AIdeaLab" | "R316B"
export type Availability = TimeSlot[]
/**
 * Either a specific room or an unknown room.
 */
export type RoomChoice = { KnownRoom: KnownRoom } | "UnknownRoom"
export type Room = { choice: RoomChoice; title: string; description: string; inferred_capacity: number | null }
